
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.codenotes.arithmetic.analyzer.syntax;

import org.codenotes.arithmetic.ast.Operation;
import org.codenotes.arithmetic.ast.Operation.Type;
import org.codenotes.arithmetic.analyzer.lexic.ArithmeticLexAnalizer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithmeticParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithmeticParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithmeticParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithmeticParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\006\002\uffff\005\uffff\001\002\000\006\002" +
    "\007\005\005\001\002\000\004\015\011\001\002\000\004" +
    "\016\010\001\002\000\004\002\001\001\002\000\006\002" +
    "\000\005\000\001\002\000\012\004\014\005\013\006\012" +
    "\013\015\001\002\000\012\004\014\005\013\006\012\013" +
    "\015\001\002\000\016\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\016\ufff6\001\002\000\016\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\016\ufff7\001\002\000\012\004\014" +
    "\005\013\006\012\013\015\001\002\000\014\010\022\011" +
    "\021\012\017\013\020\016\ufffe\001\002\000\012\004\014" +
    "\005\013\006\012\013\015\001\002\000\012\004\014\005" +
    "\013\006\012\013\015\001\002\000\012\004\014\005\013" +
    "\006\012\013\015\001\002\000\012\004\014\005\013\006" +
    "\012\013\015\001\002\000\016\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\016\ufffa\001\002\000\016\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\016\ufff9\001\002\000\016" +
    "\007\ufffb\010\022\011\021\012\ufffb\013\ufffb\016\ufffb\001" +
    "\002\000\016\007\ufffc\010\022\011\021\012\ufffc\013\ufffc" +
    "\016\ufffc\001\002\000\016\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\016\ufff8\001\002\000\014\007\031\010\022" +
    "\011\021\012\017\013\020\001\002\000\016\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\016\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\004\002\003\001\001\000\004\003\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\015\001\001\000\004\004" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\026\001\001\000\002\001\001\000\004\004\025\001" +
    "\001\000\004\004\024\001\001\000\004\004\023\001\001" +
    "\000\004\004\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithmeticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithmeticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithmeticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ArithmeticParser(ArithmeticLexAnalizer lexer) {
    super(lexer);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithmeticParser$actions {
  private final ArithmeticParser parser;

  /** Constructor */
  CUP$ArithmeticParser$actions(ArithmeticParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithmeticParser$do_action_part00000000(
    int                        CUP$ArithmeticParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithmeticParser$parser,
    java.util.Stack            CUP$ArithmeticParser$stack,
    int                        CUP$ArithmeticParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithmeticParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithmeticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= syntax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).right;
		Operation start_val = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithmeticParser$parser.done_parsing();
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // syntax ::= syntax assign SEPARATOR 
            {
              Operation RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).right;
		Operation assign = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).value;
		  
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // syntax ::= 
            {
              Operation RESULT =null;

              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("syntax",0, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // assign ::= ID ASSIGN expr 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Operation expr = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation(id.toString(), expr, Type.EQ).print(); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("assign",1, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= LEFT_PAR expr RIGHT_PAR 
            {
              Operation RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).right;
		Operation expr = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)).value;
		 RESULT = new Operation("t", expr, null); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr PLUS expr 
            {
              Operation RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).right;
		Operation expr1 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Operation expr2 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation("t", expr1, expr2, Type.ADD); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MINUS expr 
            {
              Operation RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).right;
		Operation expr1 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Operation expr2 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation("t", expr1, expr2, Type.SUB); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr TIMES expr 
            {
              Operation RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).right;
		Operation expr1 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Operation expr2 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation("t", expr1, expr2, Type.TIM); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr DIV expr 
            {
              Operation RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).right;
		Operation expr1 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Operation expr2 = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation("t", expr1, expr2, Type.DIV); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= MINUS expr 
            {
              Operation RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Operation expr = (Operation)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation("t", null, expr, Type.SUB); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.elementAt(CUP$ArithmeticParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= NUMBER 
            {
              Operation RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation(null, num.toString(), null, null); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= ID 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ArithmeticParser$stack.peek()).value;
		 RESULT = new Operation(null, id.toString(), null, null); 
              CUP$ArithmeticParser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithmeticParser$stack.peek()), RESULT);
            }
          return CUP$ArithmeticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithmeticParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithmeticParser$do_action(
    int                        CUP$ArithmeticParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithmeticParser$parser,
    java.util.Stack            CUP$ArithmeticParser$stack,
    int                        CUP$ArithmeticParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithmeticParser$do_action_part00000000(
                               CUP$ArithmeticParser$act_num,
                               CUP$ArithmeticParser$parser,
                               CUP$ArithmeticParser$stack,
                               CUP$ArithmeticParser$top);
    }
}

}
